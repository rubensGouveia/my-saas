generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        String         @id @default(uuid())
  name                      String
  email                     String         @unique
  passwordHash              String?        @map("password_hash")
  avatarUrl                 String?        @map("avatar_url")
  createdAt                 DateTime       @default(now()) @map("created_at")
  updatedAt                 DateTime       @updatedAt @map("updated_at")
  tokens                    Token[]
  accounts                  Account[]
  invites                   Invite[]
  member_on                 Member[]
  owns_organizations        Organization[]
  appointments              Appointment[]  @relation("ClientAppointments")
  professional_appointments Appointment[]  @relation("ProfessionalAppointments")

  @@map("users")
}

enum TokenType {
  PASSWORD_RECOVER
}

model Token {
  id        String    @id @default(uuid())
  type      TokenType
  createdAt DateTime  @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@map("tokens")
}

enum AccountProvider {
  GOOGLE
}

model Account {
  id                String          @id @default(uuid())
  provider          AccountProvider
  providerAccountId String          @unique @map("provider_account_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([provider, userId])
  @@map("accounts")
}

enum Role {
  ADMIN
  PROFESSIONAL
  CLIENT
}

model Invite {
  id        String   @id @default(uuid())
  phone     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  @@unique([phone, organizationId])
  @@index([phone])
  @@map("invites")
}

model Member {
  id   String @id @default(uuid())
  role Role   @default(CLIENT)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  user   User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  @@unique([organizationId, userId])
  @@map("members")
}

model Organization {
  id        String   @id @default(uuid())
  name      String
  slug      String   @unique
  domain    String?  @unique
  avatarUrl String?  @map("avatar_url")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String @map("owner_id")

  invites      Invite[]
  members      Member[]
  appointments Appointment[] @relation("OrganizationAppointments")
  services     Service[]

  @@map("organizations")
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Appointment {
  id     String            @id @default(uuid())
  date   DateTime          @db.Date
  time   DateTime          @db.Time(1)
  status AppointmentStatus @default(PENDING)

  client   User   @relation("ClientAppointments", fields: [clientId], references: [id])
  clientId String @map("client_id")

  professional   User   @relation("ProfessionalAppointments", fields: [professionalId], references: [id])
  professionalId String @map("professional_id")

  organization   Organization @relation("OrganizationAppointments", fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String  @map("service_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("appointments")
}

model Service {
  id          String  @id @default(uuid())
  name        String
  description String?
  duration    Int
  price       Float

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String       @map("organization_id")

  appointments Appointment[]

  @@map("services")
}
